# -*- coding: utf-8 -*-
"""EITone.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qq7e9uPiWByFEiNluEPtQymeoj7OnQgv

# **Com estrutura hiperfina**
"""

import numpy as np

def quNumbers():
  Nstates=40 # aqui são os 39 de antes e o dummy
  ns=16*[5]+23*[68]+[0]
  L=7*[0]+9*[1]+7*[0]+16*[1]+[0]
  J=7*[1/2]+9*[3/2]+7*[1/2]+16*[3/2]+[0]
  F=7*[3]+9*[4]+2*7*[3]+9*[4]+[0]
  M=[-3+i for i in range(7)]+[-4+i for i in range(9)]+2*[-3+i for i in range(7)]+[-4+i for i in range(9)]+[0]
  return Nstates,ns,L,J,F,M

"""Agora vamos usar a numeração do próprio Python e começar de zero. Antes era sempre confuso ficar indo e voltando de uma numeração para a outra. Vamos adotar o padrão do próprio Python."""

Nstates,ns,L,J,F,M=quNumbers()

print(Nstates)
print()
print(ns,len(ns))
print()
print(L,len(L))
print()
print(J,len(J))
print()
print(F,len(F))
print()
print(M,len(M))

#pip install ARC-Alkali-Rydberg-Calculator

# from arc import *                 #Import ARC (Alkali Rydberg Calculator)
# rb85 = Rubidium85()

# Rubidium85().getDipoleMatrixElement(68, 0, 1/2, 1/2, 68, 1, 3/2, 3/2, 1, s=0.5)

# from arc import *

def dij(ind1,ind2,q):
  try:
    if caseFlag==0:
      aux=Rubidium().getDipoleMatrixElement(ns[ind1], L[ind1], J[ind1],M[ind1], ns[ind2], L[ind2], J[ind2], M[ind2],q, s=0.5)
    elif caseFlag==1:
      aux=Rubidium().getDipoleMatrixElementHFS(ns[ind1], L[ind1], J[ind1], F[ind1],M[ind1], ns[ind2], L[ind2], J[ind2], F[ind2],M[ind2],q, s=0.5)
  except ValueError:
    aux=0.0
  return aux

alist=[[ind1+1.0j*ind2 for ind2 in range(4)] for ind1 in range(4)]
print(np.array(alist))

m1=[[1,2],[3,4]]
m2=[[10,20],[30,40]]
p12=np.matmul(np.array(m1),np.array(m2))
print(p12)
print()
print(np.matmul(m1,m2))

# dminus_flag_eq_one=[[dij(ind1,ind2,-1) for ind2 in range(Nstates)] for ind1 in range(Nstates)]
# dzero_flag_eq_one=[[dij(ind1,ind2,0) for ind2 in range(Nstates)] for ind1 in range(Nstates)]
# dplus_flag_eq_one=[[dij(ind1,ind2,1) for ind2 in range(Nstates)] for ind1 in range(Nstates)]

# print(dminus_flag_eq_one)

dm_flag_eq_one=[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.9891499999999995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011853460533567946, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.5886798357222545, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00044175239202781425, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001026539794482609, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.1878337772905807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0005702998858236716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0008675844749551139, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7863587987959508, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0006247322240164911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007083797574668268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3837075756175607, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0006247322240164911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005487086006918938, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9784290098983747, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0005702998858236715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003879955724446196, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5648962522477657, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00044175239202781425, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00022400934819528413, 0.0, 0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.5648962522477657, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0009363375583370223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.9784290098983747, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.00162178422407471, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -1.3837075756175607, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0022935492449291813, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -1.7863587987959508, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.002960959343105772, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -2.1878337772905803, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0036264197698678024, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -2.5886798357222545, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0042908377371095345, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2.98915, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004954632645138389, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0049546326451383885, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2762.1854122231875, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0042908377371095345, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1029.405724698221, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2392.1227369480725, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0036264197698678033, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1328.9570760822626, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2021.7127089644873, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.002960959343105772, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1455.7995370527283, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1650.7215144876345, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0022935492449291813, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1455.7995370527283, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1278.6433869673788, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00162178422407471, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1328.9570760822621, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -904.1374096439682, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0009363375583370223, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1029.405724698221, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -522.0039768423561, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.0004417523920278143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1029.405724698221, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, -0.0005702998858236717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1328.9570760822626, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, -0.0006247322240164914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1455.799537052729, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, -0.0006247322240164914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1455.799537052729, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, -0.0005702998858236716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1328.9570760822626, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -0.0004417523920278143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1029.405724698221, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.00022400934819528413, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 522.0039768423561, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0003879955724446196, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 904.1374096439682, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0005487086006918938, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1278.6433869673788, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0007083797574668268, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1650.7215144876345, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0008675844749551137, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 2021.7127089644869, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.001026539794482609, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2392.1227369480725, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0011853460533567948, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2762.185412223188, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]

# print(dzero_flag_eq_one)

dz_flag_eq_one=[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.4945749999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000765137587357259, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0005926730266783973, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.9568580197967493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0005100917249048392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0007759911448892392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.1878337772905807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0002550458624524196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0008675844749551139, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.259585008991063, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0008960373927811365, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.1878337772905803, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002550458624524196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0008675844749551137, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.9568580197967493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005100917249048392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0007759911448892392, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.4945749999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000765137587357259, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0005926730266783973, 0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-1.494575, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0024773163225691947, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -1.9568580197967493, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.00324356844814942, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -2.1878337772905803, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0036264197698678024, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -2.259585008991063, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0037453502333480893, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -2.1878337772905803, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0036264197698678024, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -1.9568580197967493, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00324356844814942, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.494575, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0024773163225691947, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0024773163225691943, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1782.9830167795792, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1381.0927061115938, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.00324356844814942, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1188.6553445197194, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1808.2748192879365, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0036264197698678033, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 594.3276722598597, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2021.7127089644873, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0037453502333480893, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2088.0159073694244, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0036264197698678024, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -594.3276722598597, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2021.7127089644869, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.00324356844814942, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1188.6553445197194, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1808.2748192879365, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0024773163225691943, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1782.9830167795792, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1381.0927061115938, -0.0, 0.0], [-0.0007651375873572591, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1782.9830167795797, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, -0.0005100917249048394, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1188.6553445197196, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, -0.0002550458624524197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 594.3276722598598, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0002550458624524197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -594.3276722598598, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0005100917249048394, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1188.6553445197196, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007651375873572591, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1782.9830167795797, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0005926730266783974, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1381.092706111594, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0007759911448892392, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1808.2748192879365, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0008675844749551137, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 2021.7127089644869, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0008960373927811365, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 2088.0159073694244, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0008675844749551137, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 2021.7127089644869, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0007759911448892392, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1808.2748192879365, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0005926730266783974, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1381.092706111594, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]

# print(dplus_flag_eq_one)

dp_flag_eq_one=[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5648962522477657, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00044175239202781425, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00022400934819528413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9784290098983747, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005702998858236715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003879955724446196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3837075756175607, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0006247322240164911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005487086006918938, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7863587987959508, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0006247322240164911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007083797574668268, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.1878337772905807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005702998858236716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0008675844749551139, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.5886798357222545, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00044175239202781425, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001026539794482609, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.9891499999999995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011853460533567946, 0.0], [-2.98915, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.004954632645138389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -2.5886798357222545, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0042908377371095345, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -2.1878337772905803, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0036264197698678024, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -1.7863587987959508, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.002960959343105772, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -1.3837075756175607, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0022935492449291813, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.9784290098983747, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00162178422407471, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.5648962522477657, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0009363375583370223, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0009363375583370223, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -1029.405724698221, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -522.0039768423561, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.00162178422407471, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -1328.9570760822621, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -904.1374096439682, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0022935492449291813, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -1455.7995370527283, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1278.6433869673788, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.002960959343105772, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -1455.7995370527283, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1650.7215144876345, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0036264197698678033, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1328.9570760822626, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2021.7127089644873, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0042908377371095345, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1029.405724698221, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2392.1227369480725, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0049546326451383885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2762.1854122231875, 0.0], [0.0, 0.0004417523920278143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -1029.405724698221, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0005702998858236716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -1328.9570760822626, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0006247322240164914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -1455.799537052729, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0006247322240164914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -1455.799537052729, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0005702998858236717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1328.9570760822626, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0004417523920278143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1029.405724698221, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.0011853460533567948, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2762.185412223188, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.001026539794482609, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 2392.1227369480725, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0008675844749551137, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 2021.7127089644869, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0007083797574668268, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1650.7215144876345, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0005487086006918938, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1278.6433869673788, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0003879955724446196, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 904.1374096439682, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00022400934819528413, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 522.0039768423561, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]

import numpy as np
d=[np.array(dm_flag_eq_one),np.array(dz_flag_eq_one),np.array(dp_flag_eq_one)]

print(np.shape(d))
print()
print(type(d[0]),type(d[1]),type(d[2]))

def comm(A,B):
  return np.matmul(A,B)-np.matmul(B,A)

def comm3(A,B):
  return comm(comm(comm(A,B),B),B)

def anticomm(A,B):
  return np.matmul(A,B)+np.matmul(B,A)

import scipy.constants as sc
hPlanck=sc.h*10**7 # in erg.s (not hbar)
print("Constante de Planck em erg.s = ",hPlanck)
cLight=sc.c*100 # in cm/s
print("Velocidade da luz em cm/s = ",cLight)
bohrRadius=sc.physical_constants["Bohr radius"][0]*100 # in cm
print("Raio de Bohr em cm = ",bohrRadius)
eC=sc.e # in coulombs
print("Carga elementar em coulombs = ",eC)
oneCoulomb = 2997924580 # in statcoulombs
print("Um coulomb em statcoulombs = ",oneCoulomb)
eCharge=eC*oneCoulomb # in statcoulombs
print("Carga elementar em statcoulombs = ",eCharge)
omega_e=(384.230406373+0.000100205-0.0012648885163)*10**12 # in Hz. Esta é, na verdade, a diferença entre 5P3/2(F=4) e 5S1/2(F=3)
print("omega_e in Hz = ",omega_e)

def transition_energy(fromState,toState): # in Hz
  aux=Rubidium().getTransitionFrequency(ns[fromState], L[fromState], J[fromState], ns[toState], L[toState], J[toState], s=0.5, s2=None)
  return aux

nu_S1_to_P1=omega_e
nu_P1_to_S2=625012551760933.5 # in Hz
nu_S2_to_P2=11666377223.745491 # in Hz

omega_S1=0.0 # in rad/s
omega_P1=2.0*np.pi*nu_S1_to_P1 # in rad/s
omega_S2=omega_P1+2.0*np.pi*nu_P1_to_S2 # in rad/s
omega_P2=omega_S2+2.0*np.pi*nu_S2_to_P2 # in rad/s

def projectors():
  projS1=np.diag(7*[1]+32*[0]+[0])
  projP1=np.diag(7*[0]+9*[1]+23*[0]+[0])
  projS2=np.diag(16*[0]+7*[1]+16*[0]+[0])
  projP2=np.diag(23*[0]+16*[1]+[0])
  return [projS1,projP1,projS2,projP2]

projs=projectors()
print(type(projs))
print(np.shape(projs))
print()
with np.printoptions(edgeitems=50,linewidth=120):
  print(projs[0])
  print()
  print(projs[1])
  print()
  print(projs[2])
  print()
  print(projs[3])

H0=omega_P1*projs[1]+omega_S2*projs[2]+omega_P2*projs[3]

front_const=10**(-6)*(2.0/(3.0*hPlanck*cLight**3))*(eCharge*bohrRadius)**2
print(front_const)

Gamma=[front_const*comm3(d[0],H0),front_const*comm3(d[1],H0),front_const*comm3(d[2],H0)] # in rad/microseconds

print(np.shape(Gamma))

with np.printoptions(edgeitems=50,linewidth=240):
  print(Gamma[0])

def circScalar(A,B):
  return -np.matmul(A[0],B[2])-np.matmul(A[2],B[0])+np.matmul(A[1],B[1])

def op_plus(A):
  aux0=np.matmul(projs[1],np.matmul(A,projs[0]))
  aux1=0.0*np.matmul(projs[2],np.matmul(A,projs[1]))
  aux2=0.0*np.matmul(projs[3],np.matmul(A,projs[2]))
  return aux0+aux1+aux2

def op_minus(A):
  aux0=np.matmul(projs[0],np.matmul(A,projs[1]))
  aux1=0.0*np.matmul(projs[1],np.matmul(A,projs[2]))
  aux2=0.0*np.matmul(projs[2],np.matmul(A,projs[3]))
  return aux0+aux1+aux2

Gamma_plus=[op_plus(G) for G in Gamma]
Gamma_minus=[op_minus(G) for G in Gamma]
d_plus=[op_plus(D) for D in d]
d_minus=[op_minus(D) for D in d]
dG_minus_Gd=circScalar(d_plus,Gamma_minus)-circScalar(Gamma_plus,d_minus)

def Lrad(density_matrix):
  def multlist(A,B):
    return [np.matmul(xA,B) for xA in A]
  Grho=multlist(Gamma_minus,density_matrix)
  drho=multlist(d_minus,density_matrix)
  aux0=circScalar(Grho,d_plus)-circScalar(drho,Gamma_plus)
  aux1=anticomm(dG_minus_Gd,density_matrix)
  return aux0-0.5*aux1

rho_tst=np.zeros((Nstates,Nstates),dtype=complex)
rho_tst[Nstates-2][Nstates-2]=1.0
with np.printoptions(edgeitems=50,linewidth=240):
  print(rho_tst)
  print()
  print(Lrad(rho_tst))

Gttb=2.0*np.pi*10**(-6)*7*10**(6) # in rad/microsegunds
print(Gttb)

projD=np.diag((Nstates-1)*[0]+[1])
with np.printoptions(edgeitems=50,linewidth=240):
  print(np.shape(projD))
  print()
  print(projD)

def Lttb(density_matrix):
  aux0=np.matrix.trace(np.matmul(projD,density_matrix))*projs[0]-0.5*np.matrix.trace(projs[0])*anticomm(projD,density_matrix)
  aux1=np.matrix.trace(np.matmul(projs[2],density_matrix))*projD-0.5*anticomm(projs[2],density_matrix)
  aux2=np.matrix.trace(np.matmul(projs[3],density_matrix))*projD-0.5*anticomm(projs[3],density_matrix)
  return Gttb*(aux0+aux1+aux2)

with np.printoptions(edgeitems=50,linewidth=240):
  print(Lttb(rho_tst))

print(np.matrix.trace(projs[0]))

factorItilde=eCharge*bohrRadius*np.sqrt(8.0*np.pi*10**3/cLight)
print(factorItilde)

P_control=30.0*0.001 # in W
P_probe=3.5*10**(-6) # in W
w_control=190.0*10**(-6) # in m
w_probe=170.0*10**(-6) # in m

I_control=2*P_control/(np.pi*w_control**2)
I_probe=2*P_probe/(np.pi*w_probe**2)
print("Icontrol= ",I_control," in W/m**2")
print()
print("Iprobe= ",I_probe," in W/m**2")

E0_control=factorItilde*np.sqrt(I_control)
E0_probe=factorItilde*np.sqrt(I_probe)
print("Econtrol= ",E0_control)
print()
print("Eprobe= ",E0_probe)

E0_microwave_given=0#5.51 # in mV/cm
#2.45 2.19 1.94929 1.73731 1.54838 1.37999 1.22992
E0_microwave=(1.0/299792.458)*E0_microwave_given # in statvolt/cm
E0_microwave_tilde=eCharge*bohrRadius*E0_microwave

E0c_div_hbar=2.0*np.pi*E0_control/hPlanck
E0p_div_hbar=2.0*np.pi*E0_probe/hPlanck
E0m_div_hbar=2.0*np.pi*E0_microwave_tilde/hPlanck
print("Econtrol/hbar= ",E0c_div_hbar)
print()
print("Eprobe/hbar= ",E0p_div_hbar)
print()
print("Emicrowave/hbar= ",E0m_div_hbar)

E0c=E0c_div_hbar*10**(-6)
E0p=0.2*E0p_div_hbar*10**(-6)
E0m=E0m_div_hbar*10**(-6)
print(E0c)
print()
print(E0p)
print()
print(E0m)

Omega_c=-0.5j*E0c*np.matmul(projs[1],np.matmul(np.matrix.getH(d[0]),projs[2]))\
-0.5j*E0c*np.matmul(projs[1],np.matmul(np.matrix.getH(d[2]),projs[2]))\
+(1.0j/np.sqrt(2.0))*E0c*np.matmul(projs[1],np.matmul(np.matrix.getH(d[1]),projs[2]))
Omega_c_dagger=np.matrix.getH(Omega_c)

with np.printoptions(edgeitems=50,linewidth=240):
  print(Omega_c)

Omega_p=E0p*np.matmul(projs[0],np.matmul(np.matrix.getH(d[1]),projs[1]))
Omega_p_dagger=np.matrix.getH(Omega_p)

with np.printoptions(edgeitems=50,linewidth=240):
  print(Omega_p)

Omega_mW=(1.0/np.sqrt(2.0))*E0m*np.matmul(projs[2],np.matmul(np.matrix.getH(d[0]),projs[3]))\
-(1.0/np.sqrt(2.0))*E0m*np.matmul(projs[2],np.matmul(np.matrix.getH(d[2]),projs[3]))
Omega_mW_dagger=np.matrix.getH(Omega_mW)

with np.printoptions(edgeitems=50,linewidth=240):
  print(Omega_mW)

Delta_pe=0.0
Delta_meQ1=0.0
Delta_meQ2=-2.0*np.pi*10**(-6)*10.0*10**(3) # em rad/microssegundos
print()
print(Delta_meQ2)

def Delta_cgQ(Delta_in_MHz):
  return 2.0*np.pi*10**(-6)*Delta_in_MHz*10**(6) # em rad/microssegundos

print(Delta_cgQ(-50.0))

projF3=np.diag(23*[0]+7*[1]+9*[0]+[0])
projF4=np.diag(23*[0]+7*[0]+9*[1]+[0])

def H0minushbarT(Delta_in_MHz):
  # Delta_pe=Delta_cgQ(Delta_in_MHz)
  thirdStuff=-(Delta_meQ1+1.0*Delta_cgQ(Delta_in_MHz)+Delta_pe)*projF3-(Delta_meQ2+1.0*Delta_cgQ(Delta_in_MHz)+Delta_pe)*projF4
  return -Delta_pe*projs[1]-(1.0*Delta_cgQ(Delta_in_MHz)+Delta_pe)*projs[2]+thirdStuff

with np.printoptions(edgeitems=50,linewidth=240):
  print(H0minushbarT(-5.0))

from scipy.integrate import solve_ivp

dim=Nstates # dimensão de nosso problema, já que nossa matriz densidade é 40x40
def rho_function(rho0,t,Delta_in_MHz): # rho0 é a matriz densidade inicial e t é o tempo
                          # desde 0 até o final que quisermos
  t_interval=[0.,t] # definimos o intervalo em que vamos integrar a equação
                    # mestra
  u_pass=np.array([rho0.real,rho0.imag]).flatten() # inicializamos a lista com os
                                               # elementos da matriz rho0
  def dudt(t,u_list): # a função dudt é chamada por solve_ivp e deve receber o
                      # valor do tempo e uma lista com os elementos da matriz
                      # densidade no tempo t
    u_re_im=np.reshape(u_list,(2,dim*dim)) # aqui estamos quebrando a lista u_lst em
                                       # duas listas de comprimento dim dentro de
                                       # uma lista com dois elementos
    rho=np.reshape(u_re_im[0]+1.j*u_re_im[1],(dim,dim)) # aqui reconstruímos nossa
                                                  # matriz densidade no tempo t
    H=H0minushbarT(Delta_in_MHz)-0.5*(Omega_p+Omega_p_dagger+Omega_c+Omega_c_dagger\
      +Omega_mW+Omega_mW_dagger) # nossa hamiltoniana total
    Liouville=-1.0j*comm(H,rho) # termo liouvilliano da equação mestra
    eqmestra=Liouville+Lrad(rho)+Lttb(rho) # membro direito da equação mestra
    return np.array([eqmestra.real,eqmestra.imag]).flatten() # a função dudt
                                                              # deve retornar
                                                              # uma lista de
                                                              # números reais
                                                              # para poder ser
                                                              # usada em
                                                              # solve_ivp
  sol=solve_ivp(dudt,t_interval,u_pass,method='Radau',\
                t_eval=[(k+1)*t/150.0 for k in range(150)]) # solução da equação mestra
  u_raw=np.transpose(sol.y) # extraímos o resulado para os elementos de rho(t)
  u_result=[np.reshape(u_raw[k],(2,dim*dim)) for k in range(150)] # preparamos o resultado para formatar uma
                                     # matriz dimxdim
  rho_at_t=[np.reshape(u_result[k][0]+1.j*u_result[k][1],(dim,dim)) for k in range(150)] # formatamos o resultado
                                                       # como uma matriz
                                                       # complexa dimxdim
  return rho_at_t # retornamos a resposta como uma matriz dimxdim

rho0=np.zeros((Nstates,Nstates),dtype=complex)
Nground=np.matrix.trace(projs[0])
term_to_add=projs[0]/Nground
rho0=rho0+term_to_add

with np.printoptions(edgeitems=50,linewidth=240):
  print(rho0)

tf=4.0
rho_final=rho_function(rho0,tf,0.0)

print(np.matrix.trace(rho_final[149]))

import matplotlib.pyplot as plt

plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][0,0]) for k in range(150)])
plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][1,1]) for k in range(150)])
plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][2,2]) for k in range(150)])
plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][3,3]) for k in range(150)])

plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][0,7]) for k in range(150)])
plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][0,8]) for k in range(150)])
plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][0,9]) for k in range(150)])
plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][0,10]) for k in range(150)])

plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][1,9]) for k in range(150)])
plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][2,10]) for k in range(150)])
plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][3,11]) for k in range(150)])
plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][4,12]) for k in range(150)])
plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][5,13]) for k in range(150)])
plt.plot([(k+1)*tf/150.0 for k in range(150)],[np.abs(rho_final[k][6,14]) for k in range(150)])

Number_of_Deltas=60
Deltas=[-30.0+k*60.0/(Number_of_Deltas-1) for k in range(Number_of_Deltas)]
biggy=[rho_function(rho0,tf,Delta_in_MHz) for Delta_in_MHz in Deltas]

import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

np.save('/content/drive/MyDrive/Naomy-EIT/E0mVcm_7MHzlargura.npy',biggy)

loaded_biggy=np.load('/content/drive/MyDrive/Naomy-EIT/E0mVcm_7MHzlargura.npy')

print(d[1][1,9])

plt.plot([d for d in Deltas],[-np.imag(loaded_biggy[k][149][0,8]*d[1][0,8]+loaded_biggy[k][149][1,9]*d[1][1,9]+loaded_biggy[k][149][2,10]*d[1][2,10]
                                      +loaded_biggy[k][149][3,11]*d[1][3,11]+loaded_biggy[k][149][4,12]*d[1][4,12]+
                                      loaded_biggy[k][149][5,13]*d[1][5,13]+loaded_biggy[k][149][6,14]*d[1][6,14]) for k in range(Number_of_Deltas)])
plt.grid()

x8 = [d for d in Deltas]
y8 = [np.imag(loaded_biggy[k][149][3,12]) for k in range(Number_of_Deltas)]


np.savetxt('/content/drive/MyDrive/Naomy-EIT/y8.txt', y8)
np.savetxt('/content/drive/MyDrive/Naomy-EIT/x8.txt', x8)
